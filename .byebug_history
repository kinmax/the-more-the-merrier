continue
 output.split("CORRECT-")[1].split("\n")[0]
puts output
c
best
puts output
output
continue
 priors[candidate]
candidate
s
d
priors
continue
output.split("#####")[1].strip
output.split("#####")[1]
probs
output
outpu
continue
recognized
pgo_by_prob
recognized
continue
priors_split[1].split("###")
priors_split[1]
priors_split
n
priors_string.class
priors_string
q
continue
"#{new_problem_path}.tar.bz2"
new_problem_path
quit
puts 1
puts observations.join("\n")
observations.join("\n")
observations
q
observations
plan
q
observations
plan
rand(10)
q
rand(10)
r
goto 15
observations
plan
q
observations
plan
q
observations
plan
q
observations
plan
q
plan
observations
q
plan
observations
q
plan
observations
q
plan
observations
quit
(observation_level.to_f/100.to_f)
observation_level
(plan.length.to_f/(observation_level.to_f/100.to_f)).round
number_of_actions
plan
indexes_to_add
observations
plan
q
plan
observations
q
y
indexes_to_add.sortq
indexes_to_add.sort
q
indexes_to_add
q
indexes_to_add
q
continue
indexes_to_add
q
continue
plan
plan.length
number_of_actions
q
continue
a.round
a = 5.4
a.round
a = 5.5
plan.size
plan
continue
plan
n
plan
n
plan
q
problem
problem = template.gsub("<hypothesis>", goal.gsub(",", " "))
goal.gsub(",", " ")
goal
puts template
template
q
template.gsub("<HYPOTHESIS>", goal.gsub(",", " "))
q
template.gsub("<HYPOTHESIS>", goal.gsub(",", " "))
q
select_goal(probabilities)
puts JSON.pretty_generate(probabilities)
probabilities.values.sum
probabilities.values.sum + 0.25
q
probabilities.values.sum + 0.25
probabilities.values.sum
probabilities.values
probabilities.sum
puts JSON.pretty_generate(probabilities)
q
quit]y
continue
puts JSON.pretty_generate(probabilities)
JSON.pretty_generate(probabilities)
probabilities
select_goal(probabilities)
goal
continue
g1 & g2
continue
n
g2
g1
c
g1
g2
c
candidates.sort {|a,b| similarity(real_goal, a) <=> similarity(real_goal, b) }
real_goal
candidates.sort {|a,b| a.to_i <=> b.to_i }
candidates.sort {|a,b| a.length <=> b.length }
candidates.sort {|a,b| a <=> b }
candidates.sort {|a,b| a > b }
candidates.sort {|a,b| puts a }
candidates.sort {|a,b| (similarity(real_goal, a) <=> similarity(real_goal, b)) }
candidates.sort {|a,b| similarity(real_goal, a) <=> similarity(real_goal, b) }
candidates.sort {|a,b| a <=> b}
candidates.last
candidates.first
candidates
